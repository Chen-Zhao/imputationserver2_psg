nextflow_process {

    name "Test Process Minimac4"
    script "modules/local/imputation/minimac4.nf"
    process "MINIMAC4"

    test("Should run without failures") {

        when {
            params {
                refpanel = [
                    build: "hg19"
                ]
            }
            process {
                """
                input[0] = tuple "20", 1, 100000, "status", file("${projectDir}/tests/data/input/chr20-phased/chr20.R50.merged.1.330k.recode.small.vcf.gz"), file("${projectDir}/tests/data/refpanels/hapmap2/msavs/hapmap_r22.chr20.CEU.hg19.msav")
                input[1] = []
                input[2] = params.refpanel.build
                input[3] = params.imputation.window
                input[4] = params.imputation.minimac_min_ratio
                input[5] = params.imputation.min_r2
                input[6] = params.imputation.decay
                input[7] = params.imputation.prob_threshold
                input[8] = params.imputation.prob_threshold_s1
                input[9] = params.imputation.diff_threshold
                input[10] = params.imputation.min_recom
                """
            }
        }

        then {
            assert process.success           
            def file = path(process.out.imputed_chunks.get(0).get(3)).vcf
            assert file.getNoSnps() == 31
            assert file.getChromosome() == "20"

        }

    }

    test("Should output the same number of SNPS with different minimac4 window") {

        when {
            params {
                refpanel = [
                    build: "hg19"
                ]
                minimac_window = 5
            }
            process {
                """
                input[0] = tuple "20", 1, 100000, "status", file("${projectDir}/tests/data/input/chr20-phased/chr20.R50.merged.1.330k.recode.small.vcf.gz"), file("${projectDir}/tests/data/refpanels/hapmap2/msavs/hapmap_r22.chr20.CEU.hg19.msav")
                input[1] = []
                input[2] = params.refpanel.build
                input[3] = params.imputation.window
                input[4] = params.imputation.minimac_min_ratio
                input[5] = params.imputation.min_r2
                input[6] = params.imputation.decay
                input[7] = params.imputation.prob_threshold
                input[8] = params.imputation.prob_threshold_s1
                input[9] = params.imputation.diff_threshold
                input[10] = params.imputation.min_recom
                """
            }
        }

        then {
            assert process.success           
            def file = path(process.out.imputed_chunks.get(0).get(3)).vcf
            assert file.getNoSnps() == 31
            assert file.getChromosome() == "20"

        }

    }

}